services:
    proxy:
        platform: linux/amd64
        container_name: proxy
        image: traefik:v3.3.4
        command: >
            --ping=true
            --log.level=INFO
            --api.insecure=true
            --providers.docker.exposedbydefault=false
            --entrypoints.web.address=:80
            --entrypoints.web.http.redirections.entrypoint.to=websecure
            --entrypoints.web.http.redirections.entrypoint.scheme=https
            --entrypoints.web.http.redirections.entrypoint.permanent=true
            --entrypoints.websecure.address=:443
            --entrypoints.websecure.forwardedheaders.insecure=true
            --certificatesresolvers.resolver.acme.email=${TLS_EMAIL}
            --certificatesresolvers.resolver.acme.storage=/acme/acme.json
            --certificatesresolvers.resolver.acme.httpchallenge.entrypoint=web
            --certificatesresolvers.resolver.acme.caserver=${ACME_SERVER}
        ports:
            - "0.0.0.0:80:80"
            - "0.0.0.0:443:443"
            - "127.0.0.1:8080:8080"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
            - "./proxy/acme:/acme"
            # - "./traefik.yml:/traefik.yml:ro"
        healthcheck:
            test: ["CMD", "traefik", "healthcheck", "--ping"]
            interval: 5s
            retries: 15
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 50MB

    api:
        platform: linux/amd64
        build: .
        container_name: api
        command: ./.venv/bin/python run-server.py
        environment:
            - POSTGRES_HOST=database
        env_file:
            - .env
        ports:
            - "127.0.0.1:8000:8000"
        labels:
            - traefik.enable=true
            - traefik.http.routers.api.rule=Host(`${URL}`)
            - traefik.http.routers.api.tls=true
            - traefik.http.routers.api.tls.certresolver=resolver
            - traefik.http.services.api.loadbalancer.server.port=8000
        depends_on:
            - database
        healthcheck:
            test: ["CMD", "curl", "-A", "curl-healthcheck", "localhost:8000/ping"]
            interval: 5s
            retries: 15
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 400MB

    database:
        platform: linux/amd64
        container_name: database
        image: postgres:17.0-bookworm
        env_file:
            - .env
        ports:
            - "127.0.0.1:5432:5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 5s
            retries: 15
        volumes:
            - ./database/data:/var/lib/postgresql/data
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 40MB
